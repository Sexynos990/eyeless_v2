name: KERNEL BUILDER

on:
  push:
    branches:
      - EYELESS-Necrophiliac
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version_name: ${{ steps.version_name.outputs.version }}
      commit_hash: ${{ steps.commit_info.outputs.hash }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get Version Name
        id: version_name
        run: |
          VERSION=$(git log -1 --pretty=%s | sed 's/ /-/g')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get Commit Hash
        id: commit_info
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

  original:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev bison flex libssl-dev \
            libelf-dev bc curl wget git python3 ccache git libarchive-tools

      - name: Build Original
        run: |
          chmod +x build_all.sh
          ./build_all.sh -k y -f original
          mkdir -p build/out/saved/original
          for DEVICE_DIR in build/out/*/; do
            DEVICE=$(basename "$DEVICE_DIR")
            FILE=$(find "$DEVICE_DIR" -type f -name "*.zip" | head -n 1)
            [ -f "$FILE" ] || continue
            TIMESTAMP=$(date +"%d-%m-%Y_%H-%M-%S")
            cp "$FILE" "build/out/saved/original/kernel-${{ needs.setup.outputs.version_name }}-Original_${DEVICE}_KSU_${TIMESTAMP}.zip"
          done

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: original-builds
          path: build/out/saved/original/*.zip

  overclocked:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev bison flex libssl-dev \
            libelf-dev bc curl wget git python3 ccache git libarchive-tools

      - name: Build Overclocked
        run: |
          chmod +x build_all.sh
          ./build_all.sh -k y -f overclocked
          mkdir -p build/out/saved/overclocked
          for DEVICE_DIR in build/out/*/; do
            DEVICE=$(basename "$DEVICE_DIR")
            FILE=$(find "$DEVICE_DIR" -type f -name "*.zip" | head -n 1)
            [ -f "$FILE" ] || continue
            TIMESTAMP=$(date +"%d-%m-%Y_%H-%M-%S")
            cp "$FILE" "build/out/saved/overclocked/kernel-${{ needs.setup.outputs.version_name }}-Overclocked_${DEVICE}_KSU_${TIMESTAMP}.zip"
          done

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: overclocked-builds
          path: build/out/saved/overclocked/*.zip

  underclocked:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev bison flex libssl-dev \
            libelf-dev bc curl wget git python3 ccache git libarchive-tools

      - name: Build Underclocked
        run: |
          chmod +x build_all.sh
          ./build_all.sh -k y -f underclocked
          mkdir -p build/out/saved/underclocked
          for DEVICE_DIR in build/out/*/; do
            DEVICE=$(basename "$DEVICE_DIR")
            FILE=$(find "$DEVICE_DIR" -type f -name "*.zip" | head -n 1)
            [ -f "$FILE" ] || continue
            TIMESTAMP=$(date +"%d-%m-%Y_%H-%M-%S")
            cp "$FILE" "build/out/saved/underclocked/kernel-${{ needs.setup.outputs.version_name }}-Underclocked_${DEVICE}_KSU_${TIMESTAMP}.zip"
          done

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: underclocked-builds
          path: build/out/saved/underclocked/*.zip

  release:
    needs: [setup, original, overclocked, underclocked]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ needs.setup.outputs.commit_hash }}"
          release_name: "Kernel Build - ${{ needs.setup.outputs.version_name }}"
          body: "Automated build from commit: `${{ needs.setup.outputs.commit_hash }}`"
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          gh release upload "release-${{ needs.setup.outputs.commit_hash }}" artifacts/**/*.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
