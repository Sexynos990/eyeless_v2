name: KERNEL BUILDER

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REPO_URL: https://github.com/Sexynos990/eyeless_v2
  ARTIFACT_DIR: ${{ github.workspace }}/artifacts

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ===== SETUP =====
      - name: Clone repository
        run: |
          git clone --depth 1 $REPO_URL .
          git submodule update --init --recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential libncurses5-dev bison flex libssl-dev \
            libelf-dev bc curl wget git python3 ccache libarchive-tools jq

      # ===== VERSION INFO =====
      - name: Get build metadata
        id: metadata
        run: |
          VERSION=$(git log -1 --pretty=%s | sed 's/ /-/g')
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT_HASH}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV

      # ===== BUILD STAGES =====
      - name: Build Original kernels
        run: |
          ./build_all.sh -k y -f original
          mkdir -p ${ARTIFACT_DIR}/original
          find build/out -name '*.zip' -exec cp {} ${ARTIFACT_DIR}/original \;

      - name: Build Overclocked kernels
        run: |
          ./build_all.sh -k y -f overclocked
          mkdir -p ${ARTIFACT_DIR}/overclocked
          find build/out -name '*.zip' -exec cp {} ${ARTIFACT_DIR}/overclocked \;

      - name: Build Underclocked kernels
        run: |
          ./build_all.sh -k y -f underclocked
          mkdir -p ${ARTIFACT_DIR}/underclocked
          find build/out -name '*.zip' -exec cp {} ${ARTIFACT_DIR}/underclocked \;

      # ===== ARTIFACT PROCESSING =====
      - name: Rename artifacts
        run: |
          for variant in original overclocked underclocked; do
            mkdir -p ${ARTIFACT_DIR}/renamed/${variant}
            for file in ${ARTIFACT_DIR}/${variant}/*.zip; do
              DEVICE=$(basename "$file" | cut -d'-' -f2)
              NEW_NAME="kernel-${VERSION}-${variant}_${DEVICE}_${COMMIT_HASH}_${TIMESTAMP}.zip"
              cp "$file" "${ARTIFACT_DIR}/renamed/${variant}/${NEW_NAME}"
            done
          done

      # ===== RELEASE CREATION =====
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release
          RELEASE_JSON=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "v${TIMESTAMP}",
              "name": "Kernel Build ${VERSION}",
              "body": "Automated build\nVersion: ${VERSION}\nCommit: ${COMMIT_HASH}",
              "draft": false,
              "prerelease": false
            }' \
            https://api.github.com/repos/Sexynos990/eyeless_v2/releases)

          RELEASE_ID=$(echo "$RELEASE_JSON" | jq -r '.id')
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in ${ARTIFACT_DIR}/renamed/**/*.zip; do
            echo "Uploading $file"
            curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/zip" \
              --data-binary @"$file" \
              "https://uploads.github.com/repos/Sexynos990/eyeless_v2/releases/${RELEASE_ID}/assets?name=$(basename "$file")"
          done

      # ===== FINAL REPORT =====
      - name: Show build summary
        run: |
          echo "=== BUILD COMPLETE ==="
          echo "Version: ${VERSION}"
          echo "Commit: ${COMMIT_HASH}"
          echo "Timestamp: ${TIMESTAMP}"
          echo "Artifacts:"
          find ${ARTIFACT_DIR}/renamed -type f -exec ls -lh {} \;
          echo "Release URL:"
          echo "https://github.com/Sexynos990/eyeless_v2/releases/tag/v${TIMESTAMP}"
